# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    public_directory: '%kernel.project_dir%/public'
    uploads_directory: '%public_directory%/uploads'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
        bind:
            $publicPath: '%public_directory%'
            $uploadPath: '%uploads_directory%'
    App\Services\News\FileUploaderService:
        arguments:
            $uploadPath: '%uploads_directory%'
            $publicPath: '%public_directory%'
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/OAuth2'
            - '../src/Serializer'
            - '../src/SecondaryEntity/'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class

    App\Controller\:
        resource: '../src/Controller/'
        tags: [ 'controller.service_arguments' ]

    App\Services\User\UserRegistrationService:
        autowire: true

    App\Entity\User\User:
        autowire: false

    App\Services\User\SendMailService:
        autowire: true

    App\EventListener\UserResolveListener:
        tags:
            - { name: kernel.event_listener, event: league.oauth2_server.event.user_resolve, method: onUserResolve }

